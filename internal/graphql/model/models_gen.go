// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type AddonConfig struct {
	ServiceName string `json:"serviceName"`
	Endpoint    string `json:"endpoint"`
}

type AddonList struct {
	Type   string       `json:"type"`
	Config *AddonConfig `json:"config"`
}

type ControlPlane struct {
	Name    *MeshType             `json:"name"`
	Members []*ControlPlaneMember `json:"members"`
}

type ControlPlaneFilter struct {
	Type *MeshType `json:"type"`
}

type ControlPlaneMember struct {
	Name      string `json:"name"`
	Component string `json:"component"`
	Version   string `json:"version"`
	Namespace string `json:"namespace"`
}

type Error struct {
	Code        string `json:"code"`
	Description string `json:"description"`
}

type OperatorControllerStatus struct {
	Name   *string `json:"name"`
	Status Status  `json:"status"`
	Error  *Error  `json:"error"`
}

type OperatorStatus struct {
	Status Status `json:"status"`
	Error  *Error `json:"error"`
}

type AddonSelector string

const (
	AddonSelectorPrometheus AddonSelector = "PROMETHEUS"
	AddonSelectorGrafana    AddonSelector = "GRAFANA"
	AddonSelectorZipkin     AddonSelector = "ZIPKIN"
	AddonSelectorJaeger     AddonSelector = "JAEGER"
	AddonSelectorKiali      AddonSelector = "KIALI"
)

var AllAddonSelector = []AddonSelector{
	AddonSelectorPrometheus,
	AddonSelectorGrafana,
	AddonSelectorZipkin,
	AddonSelectorJaeger,
	AddonSelectorKiali,
}

func (e AddonSelector) IsValid() bool {
	switch e {
	case AddonSelectorPrometheus, AddonSelectorGrafana, AddonSelectorZipkin, AddonSelectorJaeger, AddonSelectorKiali:
		return true
	}
	return false
}

func (e AddonSelector) String() string {
	return string(e)
}

func (e *AddonSelector) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AddonSelector(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AddonSelector", str)
	}
	return nil
}

func (e AddonSelector) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MeshType string

const (
	MeshTypeAll             MeshType = "ALL"
	MeshTypeNone            MeshType = "NONE"
	MeshTypeIstio           MeshType = "ISTIO"
	MeshTypeLinkerd         MeshType = "LINKERD"
	MeshTypeConsul          MeshType = "CONSUL"
	MeshTypeOctarine        MeshType = "OCTARINE"
	MeshTypeTraefik         MeshType = "TRAEFIK"
	MeshTypeOpenservicemesh MeshType = "OPENSERVICEMESH"
	MeshTypeKuma            MeshType = "KUMA"
	MeshTypeNginxsm         MeshType = "NGINXSM"
	MeshTypeNetworksm       MeshType = "NETWORKSM"
	MeshTypeCitrixsm        MeshType = "CITRIXSM"
)

var AllMeshType = []MeshType{
	MeshTypeAll,
	MeshTypeNone,
	MeshTypeIstio,
	MeshTypeLinkerd,
	MeshTypeConsul,
	MeshTypeOctarine,
	MeshTypeTraefik,
	MeshTypeOpenservicemesh,
	MeshTypeKuma,
	MeshTypeNginxsm,
	MeshTypeNetworksm,
	MeshTypeCitrixsm,
}

func (e MeshType) IsValid() bool {
	switch e {
	case MeshTypeAll, MeshTypeNone, MeshTypeIstio, MeshTypeLinkerd, MeshTypeConsul, MeshTypeOctarine, MeshTypeTraefik, MeshTypeOpenservicemesh, MeshTypeKuma, MeshTypeNginxsm, MeshTypeNetworksm, MeshTypeCitrixsm:
		return true
	}
	return false
}

func (e MeshType) String() string {
	return string(e)
}

func (e *MeshType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MeshType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MeshType", str)
	}
	return nil
}

func (e MeshType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Status string

const (
	StatusEnabled    Status = "ENABLED"
	StatusDisabled   Status = "DISABLED"
	StatusProcessing Status = "PROCESSING"
	StatusUnknown    Status = "UNKNOWN"
)

var AllStatus = []Status{
	StatusEnabled,
	StatusDisabled,
	StatusProcessing,
	StatusUnknown,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusEnabled, StatusDisabled, StatusProcessing, StatusUnknown:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
