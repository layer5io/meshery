name: Meshery
on:
  push:
    branches:
      - 'master'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'master'

jobs:
  golangci:
    name: golangci-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v1
        with:
          # Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.
          version: v1.29

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          # args: --issues-exit-code=0

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true
  server-tests:
    needs: [tests-ui, golangci, build-backend, build-ui]
    name: Server tests
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@master
      with:
        fetch-depth: 1
    - name: Setup Go
      uses: actions/setup-go@v1
      with:
        go-version: ${{ secrets.GO_VERSION }}
    - name: Setup Cache
      uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-        
    - run: GOPROXY=direct GOSUMDB=off GO111MODULE=on go test -tags draft ./...
  build-backend:
    name: Backend build
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@master
      with:
        fetch-depth: 1
    - name: Setup Go
      uses: actions/setup-go@v1
      with:
        go-version: ${{ secrets.GO_VERSION }}
    - name: Setup Cache
      uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-        
    - run: GOPROXY=direct GOSUMDB=off GO111MODULE=on go build -tags draft ./cmd/main.go
  build-ui:
    name: UI build
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@master
      with:
        fetch-depth: 1
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ secrets.NODE_VERSION }}
    - uses: actions/cache@v1
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - run: |
        cd ui
        npm i
        npm run build && npm run export
        cd ..
        cd provider-ui
        npm i
        npm run build && npm run export
  tests-ui:
    name: UI tests
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@master
      with:
        fetch-depth: 1
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ secrets.NODE_VERSION }}
    - uses: actions/cache@v1
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - run: |
        cd ui
        npm i
        npm test
        cd ..
        cd provider-ui
        npm i
        npm test
        cd ..
  build_release:
    name: Mesheryctl build & release
    runs-on: macos-latest
    needs: [server-tests]
    steps:
    - name: Check out code
      uses: actions/checkout@master
    - name: Unshallow
      run: git fetch --prune --unshallow
    - name: Set up Go
      uses: actions/setup-go@v1
      with:
        go-version: ${{ secrets.GO_VERSION }}
    - name: Setup Cache
      uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-        
    - name: goreleaser with tag
      uses: goreleaser/goreleaser-action@v1
      if: success() && startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_PAT }}
      with:
        version: latest
        args: release --rm-dist --skip-validate
    - name: goreleaser WITHOUT tag
      uses: goreleaser/goreleaser-action@v1
      if: success() && startsWith(github.ref, 'refs/tags/') == false
      with:
        version: latest
        args: release --snapshot --skip-publish --rm-dist
  docker:
    name: Docker build and push
    runs-on: ubuntu-latest
    needs: [build_release]
    steps:
    - name: Check out code
      if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/') && success()
      uses: actions/checkout@master
      with:
        fetch-depth: 1
    - name: Docker login
      if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/') && success()
      uses: azure/docker-login@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Docker build & tag
      if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/') && success()
      run: |
        DOCKER_BUILDKIT=1 docker build --no-cache -t ${{ secrets.IMAGE_NAME }}:stable-latest --build-arg TOKEN=${{ secrets.GLOBAL_TOKEN }} --build-arg GIT_COMMITSHA=${GITHUB_SHA::7} --build-arg GIT_VERSION=${GITHUB_REF/refs\/tags\//} .
        docker tag ${{ secrets.IMAGE_NAME }}:stable-latest ${{ secrets.IMAGE_NAME }}:stable-${GITHUB_REF/refs\/tags\//}
        docker tag ${{ secrets.IMAGE_NAME }}:stable-latest ${{ secrets.IMAGE_NAME }}:stable-${GITHUB_SHA::7}
    - name: Docker push
      if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/') && success()
      run: |
        docker push ${{ secrets.IMAGE_NAME }}:stable-latest
        docker push ${{ secrets.IMAGE_NAME }}:stable-${GITHUB_REF/refs\/tags\//}
        docker push ${{ secrets.IMAGE_NAME }}:stable-${GITHUB_SHA::7}
    - name: Docker Hub Description
      if: github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/') && success()
      uses: peter-evans/dockerhub-description@v2.0.0
      env:
        DOCKERHUB_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKERHUB_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        DOCKERHUB_REPOSITORY: ${{ secrets.IMAGE_NAME }}
