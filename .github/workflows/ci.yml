name: Meshery
on:
  push:
    branches:
      - 'master'
    paths-ignore:
      - 'docs/**'
  pull_request:
    branches:
      - 'master'
    paths-ignore:
      - 'docs/**'

jobs:
  golangci:
    name: golangci-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          # Required: the version of golangci-lint is required and must be specified without patch version: we always use the latest patch version.
          version: v1.32

          # Optional: working directory, useful for monorepos
          # working-directory: somedir

          # Optional: golangci-lint command line arguments.
          # args: --issues-exit-code=0

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true
  server-tests:
    needs: [tests-ui, golangci, build-backend, build-ui]
    name: Server tests
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@master
      with:
        fetch-depth: 1
    - name: Setup Go
      uses: actions/setup-go@v1
      with:
        go-version: ${{ secrets.GO_VERSION }}
    - name: Setup Cache
      uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - run: GOPROXY=direct GOSUMDB=off GO111MODULE=on go test -tags draft ./...
  build-backend:
    name: Backend build
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@master
      with:
        fetch-depth: 1
    - name: Setup Go
      uses: actions/setup-go@v1
      with:
        go-version: ${{ secrets.GO_VERSION }}
    - name: Setup Cache
      uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - run: |
        go mod tidy
        GOPROXY=direct GOSUMDB=off GO111MODULE=on go build -tags draft ./cmd/main.go
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      with:
        name: meshery
        path: ./main
  build-ui:
    name: UI build
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@master
      with:
        fetch-depth: 1
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ secrets.NODE_VERSION }}
    - name: Cache node modules
      id: node-cache
      uses: actions/cache@v2
      with:
        path: |
          ~/cache
          ~/.cache
          !~/cache/exclude
          **/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/lockfiles') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Install dependencies
      run: |
        cd ui
        npm i
        cd ..
        cd provider-ui
        npm i
    - name: build app
      run: |
        make build-ui
  tests-ui:
    needs: [build-ui]
    name: UI integration tests
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@master
      with:
        fetch-depth: 1
    - uses: actions/setup-node@v1
      with:
        node-version: ${{ secrets.NODE_VERSION }}
    - name: Cache node modules
      id: node-cache
      uses: actions/cache@v2
      with:
        path: |
          ~/cache
          ~/.cache
          !~/cache/exclude
          **/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/lockfiles') }}
    - name: Run tests
      run: |
        cd ui
        npm i
        npm run ci-test-integration
        codecov
        cd ..
        cd provider-ui
        npm i
        npm test
        codecov
        cd ..
  tests-ui-e2e:
    needs: [build-backend, build-ui]
    name: UI end-to-end tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@master
        with:
          fetch-depth: 1
      - name: Check out meshery-consul code
        uses: actions/checkout@master
        with:
          repository: layer5io/meshery-consul
          path: ./meshery-consul
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: meshery
      - name: Setup go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ secrets.GO_VERSION }}
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ secrets.NODE_VERSION }}
      - name: Cache node modules
        id: node-cache
        uses: actions/cache@v2
        with:
          path: |
            ~/cache
            ~/.cache
            !~/cache/exclude
            **/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/lockfiles') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.1.0
        with:
          cluster_name: "kind-cluster"
      - name: Build Next App
        run: |
          cd ui
          npm i
          npm run build
          npm run export
      - name: Update /etc/hosts
        run: echo "127.0.0.1 mesherylocal.layer5.io" | sudo tee -a /etc/hosts
      - name: Run meshery-consul
        run: |
          mkdir /home/runner/.meshery
          cd ./meshery-consul
          go run main.go &
      - name: Run backend
        env:
          PROVIDER_BASE_URLS: https://meshery.layer5.io
          PORT: 9081
          ADAPTER_URLS: "mesherylocal.layer5.io:10000 mesherylocal.layer5.io:10001 mesherylocal.layer5.io:10002 mesherylocal.layer5.io:10003 mesherylocal.layer5.io:10004 mesherylocal.layer5.io:10008 mesherylocal.layer5.io:10009 mesherylocal.layer5.io:10007"
        run: |
          chmod +x ./main
          ./main &
      - name: Cypress run
        uses: cypress-io/github-action@v2
        with:
          working-directory: ui
          start: npm start
          wait-on: http://localhost:3000
          spec: cypress/integration/e2e/**/*
          record: true
          tag: node-${{ matrix.node }}
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  mesheryctl_build:
    name: Mesheryctl build & release
    runs-on: macos-latest
    needs: [server-tests]
    steps:
    - name: Check out code
      uses: actions/checkout@master
    - name: Unshallow
      run: git fetch --prune --unshallow
    - name: Set up Go
      uses: actions/setup-go@v1
      with:
        go-version: ${{ secrets.GO_VERSION }}
    - name: Setup Cache
      uses: actions/cache@v1
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    - name: goreleaser WITHOUT tag
      uses: goreleaser/goreleaser-action@v1
      if: success() && startsWith(github.ref, 'refs/tags/') == false
      env:
        RELEASE_CHANNEL: "edge"
      with:
        version: latest
        args: release --snapshot --skip-publish --rm-dist
  docker-build-test:
    name: Docker build
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@master
      with:
        fetch-depth: 1
    - name: Docker edge build & tag
      if: startsWith(github.ref, 'refs/tags/') != true && success()
      env: 
        RELEASE_CHANNEL: "edge"
      run: |
        DOCKER_BUILDKIT=1 docker build --no-cache -t meshery:edge-latest --build-arg TOKEN=test --build-arg GIT_COMMITSHA=${GITHUB_SHA::7} --build-arg RELEASE_CHANNEL=${RELEASE_CHANNEL} .
        docker tag meshery:edge-latest meshery:edge-${GITHUB_SHA::7}
